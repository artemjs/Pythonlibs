#!/usr/bin/env python3
"""
üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ friendly_exceptions
Advanced features of friendly_exceptions

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
This example shows all advanced features of the library
"""

import friendly_exceptions
from friendly_exceptions import set_language, get_language
from friendly_exceptions.config import Config
from friendly_exceptions.logging import get_logger

print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ friendly_exceptions")
print("üöÄ Advanced features of friendly_exceptions")
print("=" * 60)

# 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
print("\n1Ô∏è‚É£ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ / Logging:")
print("1Ô∏è‚É£ Logging:")

logger = get_logger()
logger.info("–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
logger.info("Starting demonstration of advanced features")

# 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
print("\n2Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
print("2Ô∏è‚É£ Real-time configuration:")

print(f"   –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {get_language()}")
print(f"   Current language: {get_language()}")
print(f"   –í–∫–ª—é—á–µ–Ω–æ: {Config.is_enabled()}")
print(f"   Enabled: {Config.is_enabled()}")
print(f"   –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å traceback: {Config.show_traceback()}")
print(f"   Show traceback: {Config.show_traceback()}")

# 3. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
print("\n3Ô∏è‚É£ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤:")
print("3Ô∏è‚É£ Dynamic language switching:")

languages = ["ru", "en", "ru", "en"]
for lang in languages:
    set_language(lang)
    print(f"   –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {get_language()}")
    print(f"   Language changed to: {get_language()}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
    try:
        data = {"name": "Alice"}
        print(data["age"])  # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
    except KeyError:
        pass

# 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print("\n4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
print("4Ô∏è‚É£ Configuring library behavior:")

# –û—Ç–∫–ª—é—á–∞–µ–º traceback
Config.set_show_traceback(False)
print("   Traceback –æ—Ç–∫–ª—é—á–µ–Ω / Traceback disabled")

try:
    text = "Hello"
    print(text.uppercase())  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
except AttributeError:
    pass

# –í–∫–ª—é—á–∞–µ–º traceback –æ–±—Ä–∞—Ç–Ω–æ
Config.set_show_traceback(True)
print("   Traceback –≤–∫–ª—é—á–µ–Ω / Traceback enabled")

try:
    numbers = [1, 2, 3]
    print(numbers[10])  # –ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
except IndexError:
    pass

# 5. –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫
print("\n5Ô∏è‚É£ –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫:")
print("5Ô∏è‚É£ Working with different error types:")

error_scenarios = [
    ("KeyError", lambda: {"a": 1}["b"]),
    ("ValueError", lambda: int("abc")),
    ("TypeError", lambda: "hello" + 123),
    ("IndexError", lambda: [1, 2, 3][10]),
    ("AttributeError", lambda: "hello".uppercase()),
    ("NameError", lambda: print(undefined_var)),
    ("ZeroDivisionError", lambda: 10 / 0),
]

for error_name, error_func in error_scenarios:
    print(f"\n   {error_name}:")
    try:
        error_func()
    except Exception:
        pass

# 6. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
print("\n6Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º:")
print("6Ô∏è‚É£ Integration with existing code:")

class ExistingClass:
    def __init__(self):
        self.data = {"key1": "value1", "key2": "value2"}
    
    def get_value(self, key):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É"""
        try:
            return self.data[key]
        except KeyError:
            pass  # friendly_exceptions –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    
    def process_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            result = data["items"][0]["name"]
            return result
        except (KeyError, IndexError, TypeError):
            pass  # friendly_exceptions –æ–±—ä—è—Å–Ω–∏—Ç –ø—Ä–æ–±–ª–µ–º—É

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
obj = ExistingClass()

print("   –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:")
value = obj.get_value("key1")
if value:
    print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")

print("\n   –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:")
value = obj.get_value("key3")  # –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

print("\n   –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
complex_data = {
    "items": [
        {"name": "Item 1", "price": 100},
        {"name": "Item 2", "price": 200}
    ]
}
result = obj.process_data(complex_data)
if result:
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

print("\n   –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
invalid_data = {"items": []}  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
result = obj.process_data(invalid_data)

# 7. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
print("\n7Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
print("7Ô∏è‚É£ Performance and optimization:")

import time

# –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
start_time = time.time()

for i in range(100):
    try:
        data = {"a": 1}
        print(data["b"])  # –û—à–∏–±–∫–∞
    except KeyError:
        pass

end_time = time.time()
processing_time = end_time - start_time

print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 100 –æ—à–∏–±–æ–∫: {processing_time:.4f} —Å–µ–∫—É–Ω–¥")
print(f"   Time to process 100 errors: {processing_time:.4f} seconds")
print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—à–∏–±–∫—É: {processing_time/100*1000:.2f} –º—Å")
print(f"   Average time per error: {processing_time/100*1000:.2f} ms")

# 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
print("\n8Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
print("8Ô∏è‚É£ Usage statistics:")

print("   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫:")
print("   Supported error types:")
supported_errors = [
    "KeyError", "ValueError", "TypeError", "IndexError", "AttributeError",
    "FileNotFoundError", "ImportError", "ZeroDivisionError", "NameError",
    "AssertionError", "OSError", "PermissionError", "IsADirectoryError",
    "ConnectionError", "TimeoutError", "JSONDecodeError", "UnicodeError",
    "OverflowError", "RecursionError", "MemoryError", "SyntaxError",
    "IndentationError", "RuntimeError", "NotImplementedError", "SystemError"
]

for i, error_type in enumerate(supported_errors, 1):
    print(f"   {i:2d}. {error_type}")

print(f"\n   –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫: {len(supported_errors)}")
print(f"   Total error types: {len(supported_errors)}")

# 9. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
print("\n9Ô∏è‚É£ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
print("9Ô∏è‚É£ Conclusion:")

print("   ‚úÖ friendly_exceptions –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
print("   ‚úÖ friendly_exceptions is fully integrated")
print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 25+ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫")
print("   ‚úÖ Supports 25+ error types")
print("   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 2 —è–∑—ã–∫–∞—Ö")
print("   ‚úÖ Works in 2 languages")
print("   ‚úÖ –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
print("   ‚úÖ Flexible configuration")
print("   ‚úÖ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
print("   ‚úÖ High performance")

logger.info("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
logger.info("Demonstration completed successfully")

print("\nüéâ friendly_exceptions –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
print("üéâ friendly_exceptions is ready for production use!")
print("\nüí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!")
print("üí° Tip: Use all library features!")
