#!/usr/bin/env python3
"""
üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å friendly_exceptions
Web development with friendly_exceptions

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
This example shows how the library helps in web development
"""

import friendly_exceptions
import json

print("üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å friendly_exceptions")
print("üåê Web Development with friendly_exceptions")
print("=" * 50)

# –°–∏–º—É–ª—è—Ü–∏—è –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ (Flask/Django style)
class WebApp:
    def __init__(self):
        self.routes = {}
        self.users = {
            "alice": {"id": 1, "email": "alice@example.com", "role": "admin"},
            "bob": {"id": 2, "email": "bob@example.com", "role": "user"}
        }
    
    def get_user(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏"""
        try:
            user = self.users[username]
            return {
                "id": user["id"],
                "email": user["email"],
                "role": user["role"]
            }
        except KeyError:
            pass  # friendly_exceptions –ø–æ–∫–∞–∂–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    def process_json_request(self, json_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            data = json.loads(json_data)
            action = data["action"]
            params = data["params"]
            
            if action == "create_user":
                name = params["name"]
                email = params["email"]
                return f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} ({email})"
            elif action == "update_user":
                user_id = params["user_id"]
                updates = params["updates"]
                return f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {updates}"
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
                
        except (json.JSONDecodeError, KeyError, TypeError):
            pass  # friendly_exceptions –æ–±—ä—è—Å–Ω–∏—Ç –ø—Ä–æ–±–ª–µ–º—É

# –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = WebApp()

print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
print("1Ô∏è‚É£ Getting user:")

# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user = app.get_user("alice")
if user:
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user}")

# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print("\n   –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
user = app.get_user("charlie")  # –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

print("\n2Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∑–∞–ø—Ä–æ—Å–æ–≤:")
print("2Ô∏è‚É£ Processing JSON requests:")

# –í–∞–ª–∏–¥–Ω—ã–π JSON
valid_json = '{"action": "create_user", "params": {"name": "David", "email": "david@example.com"}}'
print("   –í–∞–ª–∏–¥–Ω—ã–π JSON:")
result = app.process_json_request(valid_json)
if result:
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

# –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
invalid_json = '{"action": "create_user", "params": {"name": "Eve"}'  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
print("\n   –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON:")
result = app.process_json_request(invalid_json)

# JSON —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
incomplete_json = '{"action": "update_user", "params": {"user_id": 1}}'  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç "updates"
print("\n   JSON —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:")
result = app.process_json_request(incomplete_json)

print("\n3Ô∏è‚É£ –†–∞–±–æ—Ç–∞ —Å HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏:")
print("3Ô∏è‚É£ Working with HTTP headers:")

def process_headers(headers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    try:
        content_type = headers["Content-Type"]
        authorization = headers["Authorization"]
        user_agent = headers["User-Agent"]
        
        print(f"   Content-Type: {content_type}")
        print(f"   Authorization: {authorization}")
        print(f"   User-Agent: {user_agent}")
        
    except KeyError:
        pass  # friendly_exceptions –ø–æ–∫–∞–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

# –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
request_headers = {
    "Content-Type": "application/json",
    "User-Agent": "Mozilla/5.0"
    # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç "Authorization"
}

process_headers(request_headers)

print("\n4Ô∏è‚É£ –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º–∞–º–∏:")
print("4Ô∏è‚É£ Working with forms:")

def validate_form_data(form_data):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã"""
    try:
        username = form_data["username"]
        email = form_data["email"]
        password = form_data["password"]
        confirm_password = form_data["confirm_password"]
        
        if password != confirm_password:
            raise ValueError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        
        if len(username) < 3:
            raise ValueError("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        
        return True
        
    except (KeyError, ValueError):
        pass  # friendly_exceptions –æ–±—ä—è—Å–Ω–∏—Ç –ø—Ä–æ–±–ª–µ–º—É

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º—ã
form_data = {
    "username": "al",
    "email": "alice@example.com"
    # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç "password" –∏ "confirm_password"
}

validate_form_data(form_data)

print("\n‚ú® –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–ª–∞ –ø—Ä–æ—â–µ —Å friendly_exceptions!")
print("‚ú® Web development is easier with friendly_exceptions!")
print("\nüí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API –∏ —Ñ–æ—Ä–º!")
print("üí° Tip: Use the library for debugging APIs and forms!")
